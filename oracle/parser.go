// Code generated by pigeon; DO NOT EDIT.

package oracle

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"tsqlgrl/generic"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 10, col: 1, offset: 108},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 116},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 116},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 10, col: 9, offset: 116},
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 9, offset: 116},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 21, offset: 128},
							label: "stmts",
							expr: &oneOrMoreExpr{
								pos: position{line: 10, col: 27, offset: 134},
								expr: &seqExpr{
									pos: position{line: 10, col: 28, offset: 135},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 10, col: 28, offset: 135},
											name: "Statement",
										},
										&zeroOrOneExpr{
											pos: position{line: 10, col: 38, offset: 145},
											expr: &ruleRefExpr{
												pos:  position{line: 10, col: 38, offset: 145},
												name: "WhiteSpace",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 52, offset: 159},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 23, col: 1, offset: 429},
			expr: &choiceExpr{
				pos: position{line: 23, col: 14, offset: 442},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 23, col: 14, offset: 442},
						name: "CreateTable",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 28, offset: 456},
						name: "Grant",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 36, offset: 464},
						name: "Comment",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 46, offset: 474},
						name: "Include",
					},
				},
			},
		},
		{
			name: "CreateTable",
			pos:  position{line: 26, col: 1, offset: 487},
			expr: &actionExpr{
				pos: position{line: 26, col: 16, offset: 502},
				run: (*parser).callonCreateTable1,
				expr: &seqExpr{
					pos: position{line: 26, col: 16, offset: 502},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 26, col: 16, offset: 502},
							val:        "CREATE",
							ignoreCase: false,
							want:       "\"CREATE\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 26, col: 25, offset: 511},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 511},
								name: "WhiteSpace",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 26, col: 37, offset: 523},
							expr: &litMatcher{
								pos:        position{line: 26, col: 37, offset: 523},
								val:        "GLOBAL",
								ignoreCase: false,
								want:       "\"GLOBAL\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 26, col: 47, offset: 533},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 47, offset: 533},
								name: "WhiteSpace",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 26, col: 59, offset: 545},
							expr: &litMatcher{
								pos:        position{line: 26, col: 59, offset: 545},
								val:        "TEMPORARY",
								ignoreCase: false,
								want:       "\"TEMPORARY\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 26, col: 72, offset: 558},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 72, offset: 558},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 26, col: 84, offset: 570},
							val:        "TABLE",
							ignoreCase: false,
							want:       "\"TABLE\"",
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 92, offset: 578},
							name: "WhiteSpace",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 103, offset: 589},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 108, offset: 594},
								name: "TableName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 118, offset: 604},
							name: "WhiteSpace",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 129, offset: 615},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 134, offset: 620},
								name: "TableBody",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 144, offset: 630},
							name: "IgnoreTableEndParams",
						},
						&litMatcher{
							pos:        position{line: 26, col: 165, offset: 651},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "Grant",
			pos:  position{line: 42, col: 1, offset: 912},
			expr: &actionExpr{
				pos: position{line: 42, col: 10, offset: 921},
				run: (*parser).callonGrant1,
				expr: &seqExpr{
					pos: position{line: 42, col: 10, offset: 921},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 42, col: 10, offset: 921},
							val:        "GRANT",
							ignoreCase: false,
							want:       "\"GRANT\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 18, offset: 929},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 18, offset: 929},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 30, offset: 941},
							label: "grantType",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 40, offset: 951},
								name: "GrantType",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 50, offset: 961},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 50, offset: 961},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 42, col: 62, offset: 973},
							val:        "ON",
							ignoreCase: false,
							want:       "\"ON\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 67, offset: 978},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 67, offset: 978},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 79, offset: 990},
							label: "grantWhere",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 90, offset: 1001},
								name: "TableName",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 100, offset: 1011},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 100, offset: 1011},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 42, col: 112, offset: 1023},
							val:        "TO",
							ignoreCase: false,
							want:       "\"TO\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 117, offset: 1028},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 117, offset: 1028},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 129, offset: 1040},
							label: "grantWho",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 138, offset: 1049},
								name: "GrantWho",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 147, offset: 1058},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 147, offset: 1058},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 42, col: 159, offset: 1070},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "GrantWho",
			pos:  position{line: 49, col: 1, offset: 1208},
			expr: &choiceExpr{
				pos: position{line: 49, col: 14, offset: 1221},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 49, col: 14, offset: 1221},
						name: "LiteralString",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 28, offset: 1235},
						name: "GrantPublic",
					},
				},
			},
		},
		{
			name: "GrantPublic",
			pos:  position{line: 50, col: 1, offset: 1249},
			expr: &actionExpr{
				pos: position{line: 50, col: 16, offset: 1264},
				run: (*parser).callonGrantPublic1,
				expr: &litMatcher{
					pos:        position{line: 50, col: 16, offset: 1264},
					val:        "PUBLIC",
					ignoreCase: false,
					want:       "\"PUBLIC\"",
				},
			},
		},
		{
			name: "GrantType",
			pos:  position{line: 53, col: 1, offset: 1309},
			expr: &actionExpr{
				pos: position{line: 53, col: 14, offset: 1322},
				run: (*parser).callonGrantType1,
				expr: &choiceExpr{
					pos: position{line: 53, col: 15, offset: 1323},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 53, col: 15, offset: 1323},
							val:        "UPDATE",
							ignoreCase: false,
							want:       "\"UPDATE\"",
						},
						&litMatcher{
							pos:        position{line: 53, col: 26, offset: 1334},
							val:        "SELECT",
							ignoreCase: false,
							want:       "\"SELECT\"",
						},
						&litMatcher{
							pos:        position{line: 53, col: 37, offset: 1345},
							val:        "INSERT",
							ignoreCase: false,
							want:       "\"INSERT\"",
						},
						&litMatcher{
							pos:        position{line: 53, col: 48, offset: 1356},
							val:        "DELETE",
							ignoreCase: false,
							want:       "\"DELETE\"",
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 57, col: 1, offset: 1404},
			expr: &actionExpr{
				pos: position{line: 57, col: 12, offset: 1415},
				run: (*parser).callonComment1,
				expr: &seqExpr{
					pos: position{line: 57, col: 12, offset: 1415},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 57, col: 12, offset: 1415},
							val:        "COMMENT",
							ignoreCase: false,
							want:       "\"COMMENT\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 22, offset: 1425},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 22, offset: 1425},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 57, col: 34, offset: 1437},
							val:        "ON",
							ignoreCase: false,
							want:       "\"ON\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 39, offset: 1442},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1442},
								name: "WhiteSpace",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 51, offset: 1454},
							name: "CommentOnKeyword",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 68, offset: 1471},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 68, offset: 1471},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 80, offset: 1483},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 85, offset: 1488},
								name: "TableName",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 95, offset: 1498},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 95, offset: 1498},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 57, col: 107, offset: 1510},
							val:        "IS",
							ignoreCase: false,
							want:       "\"IS\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 112, offset: 1515},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 112, offset: 1515},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 124, offset: 1527},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 129, offset: 1532},
								name: "LiteralString",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 143, offset: 1546},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 143, offset: 1546},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 57, col: 155, offset: 1558},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "CommentOnKeyword",
			pos:  position{line: 64, col: 1, offset: 1676},
			expr: &choiceExpr{
				pos: position{line: 64, col: 21, offset: 1696},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 64, col: 21, offset: 1696},
						val:        "TABLE",
						ignoreCase: false,
						want:       "\"TABLE\"",
					},
					&litMatcher{
						pos:        position{line: 64, col: 31, offset: 1706},
						val:        "COLUMN",
						ignoreCase: false,
						want:       "\"COLUMN\"",
					},
				},
			},
		},
		{
			name: "TableName",
			pos:  position{line: 66, col: 1, offset: 1718},
			expr: &actionExpr{
				pos: position{line: 66, col: 14, offset: 1731},
				run: (*parser).callonTableName1,
				expr: &seqExpr{
					pos: position{line: 66, col: 14, offset: 1731},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 66, col: 14, offset: 1731},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 20, offset: 1737},
								name: "TableNamePart",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 34, offset: 1751},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 66, col: 39, offset: 1756},
								expr: &seqExpr{
									pos: position{line: 66, col: 40, offset: 1757},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 66, col: 40, offset: 1757},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&ruleRefExpr{
											pos:  position{line: 66, col: 44, offset: 1761},
											name: "TableNamePart",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableNamePart",
			pos:  position{line: 80, col: 1, offset: 2173},
			expr: &choiceExpr{
				pos: position{line: 80, col: 18, offset: 2190},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 80, col: 18, offset: 2190},
						name: "LiteralString",
					},
					&actionExpr{
						pos: position{line: 80, col: 34, offset: 2206},
						run: (*parser).callonTableNamePart3,
						expr: &ruleRefExpr{
							pos:  position{line: 80, col: 34, offset: 2206},
							name: "Identifier",
						},
					},
				},
			},
		},
		{
			name: "TableBody",
			pos:  position{line: 84, col: 1, offset: 2255},
			expr: &ruleRefExpr{
				pos:  position{line: 84, col: 14, offset: 2268},
				name: "TableBodyDef",
			},
		},
		{
			name: "TableBodyDef",
			pos:  position{line: 86, col: 1, offset: 2305},
			expr: &actionExpr{
				pos: position{line: 86, col: 17, offset: 2321},
				run: (*parser).callonTableBodyDef1,
				expr: &seqExpr{
					pos: position{line: 86, col: 17, offset: 2321},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 86, col: 17, offset: 2321},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 86, col: 21, offset: 2325},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 21, offset: 2325},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 33, offset: 2337},
							label: "cols",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 38, offset: 2342},
								name: "Columns",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 86, col: 46, offset: 2350},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 46, offset: 2350},
								name: "WhiteSpace",
							},
						},
						&litMatcher{
							pos:        position{line: 86, col: 58, offset: 2362},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Columns",
			pos:  position{line: 90, col: 1, offset: 2394},
			expr: &actionExpr{
				pos: position{line: 90, col: 12, offset: 2405},
				run: (*parser).callonColumns1,
				expr: &labeledExpr{
					pos:   position{line: 90, col: 12, offset: 2405},
					label: "items",
					expr: &zeroOrMoreExpr{
						pos: position{line: 90, col: 18, offset: 2411},
						expr: &seqExpr{
							pos: position{line: 90, col: 19, offset: 2412},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 90, col: 19, offset: 2412},
									expr: &ruleRefExpr{
										pos:  position{line: 90, col: 19, offset: 2412},
										name: "WhiteSpace",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 90, col: 31, offset: 2424},
									expr: &litMatcher{
										pos:        position{line: 90, col: 31, offset: 2424},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 90, col: 36, offset: 2429},
									expr: &ruleRefExpr{
										pos:  position{line: 90, col: 36, offset: 2429},
										name: "WhiteSpace",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 90, col: 48, offset: 2441},
									name: "Column",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Column",
			pos:  position{line: 114, col: 1, offset: 2846},
			expr: &actionExpr{
				pos: position{line: 114, col: 11, offset: 2856},
				run: (*parser).callonColumn1,
				expr: &seqExpr{
					pos: position{line: 114, col: 11, offset: 2856},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 11, offset: 2856},
							label: "colname",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 19, offset: 2864},
								name: "ColumnName",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 30, offset: 2875},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 30, offset: 2875},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 42, offset: 2887},
							label: "coltype",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 50, offset: 2895},
								name: "ColumnType",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 61, offset: 2906},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 61, offset: 2906},
								name: "WhiteSpace",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 73, offset: 2918},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 73, offset: 2918},
								name: "ColumnExtras",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 87, offset: 2932},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 87, offset: 2932},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 99, offset: 2944},
							label: "_c",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 102, offset: 2947},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 102, offset: 2947},
									name: "ColumnTypeArgs",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 118, offset: 2963},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 118, offset: 2963},
								name: "WhiteSpace",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 130, offset: 2975},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 130, offset: 2975},
								name: "PreColumnDefault",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 114, col: 148, offset: 2993},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 148, offset: 2993},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 160, offset: 3005},
							label: "defVal",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 167, offset: 3012},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 167, offset: 3012},
									name: "ColumnDefault",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PreColumnDefault",
			pos:  position{line: 151, col: 1, offset: 3722},
			expr: &litMatcher{
				pos:        position{line: 151, col: 21, offset: 3742},
				val:        "WITH LOCAL TIME ZONE",
				ignoreCase: false,
				want:       "\"WITH LOCAL TIME ZONE\"",
			},
		},
		{
			name: "ColumnExtras",
			pos:  position{line: 152, col: 1, offset: 3766},
			expr: &oneOrMoreExpr{
				pos: position{line: 152, col: 17, offset: 3782},
				expr: &seqExpr{
					pos: position{line: 152, col: 18, offset: 3783},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 152, col: 18, offset: 3783},
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 18, offset: 3783},
								name: "WhiteSpace",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 30, offset: 3795},
							name: "ColumnExtra",
						},
						&zeroOrOneExpr{
							pos: position{line: 152, col: 42, offset: 3807},
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 42, offset: 3807},
								name: "WhiteSpace",
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnExtra",
			pos:  position{line: 153, col: 1, offset: 3822},
			expr: &choiceExpr{
				pos: position{line: 153, col: 16, offset: 3837},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 153, col: 16, offset: 3837},
						name: "ColumnExtraGen",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 33, offset: 3854},
						name: "ColumnExtraMinValue",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 55, offset: 3876},
						name: "ColumnExtraMaxValue",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 77, offset: 3898},
						name: "ColumnExtraInc",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 94, offset: 3915},
						name: "ColumnExtraStartWith",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 117, offset: 3938},
						name: "ColumnExtraNoOrder",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 138, offset: 3959},
						name: "ColumnExtraCacheSize",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 161, offset: 3982},
						name: "ColumnExtraNoCycle",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 182, offset: 4003},
						name: "ColumnExtraNoKeep",
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 202, offset: 4023},
						name: "ColumnExtraNoScale",
					},
				},
			},
		},
		{
			name: "ColumnExtraGen",
			pos:  position{line: 154, col: 1, offset: 4043},
			expr: &litMatcher{
				pos:        position{line: 154, col: 19, offset: 4061},
				val:        "GENERATED ALWAYS AS IDENTITY",
				ignoreCase: false,
				want:       "\"GENERATED ALWAYS AS IDENTITY\"",
			},
		},
		{
			name: "ColumnExtraMinValue",
			pos:  position{line: 155, col: 1, offset: 4093},
			expr: &seqExpr{
				pos: position{line: 155, col: 24, offset: 4116},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 155, col: 24, offset: 4116},
						val:        "MINVALUE",
						ignoreCase: false,
						want:       "\"MINVALUE\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 155, col: 35, offset: 4127},
						expr: &ruleRefExpr{
							pos:  position{line: 155, col: 35, offset: 4127},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 155, col: 47, offset: 4139},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "ColumnExtraMaxValue",
			pos:  position{line: 156, col: 1, offset: 4147},
			expr: &seqExpr{
				pos: position{line: 156, col: 24, offset: 4170},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 156, col: 24, offset: 4170},
						val:        "MAXVALUE",
						ignoreCase: false,
						want:       "\"MAXVALUE\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 156, col: 35, offset: 4181},
						expr: &ruleRefExpr{
							pos:  position{line: 156, col: 35, offset: 4181},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 156, col: 47, offset: 4193},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "ColumnExtraInc",
			pos:  position{line: 157, col: 1, offset: 4201},
			expr: &seqExpr{
				pos: position{line: 157, col: 19, offset: 4219},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 157, col: 19, offset: 4219},
						val:        "INCREMENT BY",
						ignoreCase: false,
						want:       "\"INCREMENT BY\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 157, col: 34, offset: 4234},
						expr: &ruleRefExpr{
							pos:  position{line: 157, col: 34, offset: 4234},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 157, col: 46, offset: 4246},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "ColumnExtraStartWith",
			pos:  position{line: 158, col: 1, offset: 4254},
			expr: &seqExpr{
				pos: position{line: 158, col: 25, offset: 4278},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 158, col: 25, offset: 4278},
						val:        "START WITH",
						ignoreCase: false,
						want:       "\"START WITH\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 158, col: 38, offset: 4291},
						expr: &ruleRefExpr{
							pos:  position{line: 158, col: 38, offset: 4291},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 158, col: 50, offset: 4303},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "ColumnExtraCacheSize",
			pos:  position{line: 159, col: 1, offset: 4311},
			expr: &seqExpr{
				pos: position{line: 159, col: 25, offset: 4335},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 159, col: 25, offset: 4335},
						val:        "CACHE",
						ignoreCase: false,
						want:       "\"CACHE\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 159, col: 33, offset: 4343},
						expr: &ruleRefExpr{
							pos:  position{line: 159, col: 33, offset: 4343},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 159, col: 45, offset: 4355},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "ColumnExtraNoOrder",
			pos:  position{line: 160, col: 1, offset: 4363},
			expr: &litMatcher{
				pos:        position{line: 160, col: 23, offset: 4385},
				val:        "NOORDER",
				ignoreCase: false,
				want:       "\"NOORDER\"",
			},
		},
		{
			name: "ColumnExtraNoCycle",
			pos:  position{line: 161, col: 1, offset: 4396},
			expr: &litMatcher{
				pos:        position{line: 161, col: 23, offset: 4418},
				val:        "NOCYCLE",
				ignoreCase: false,
				want:       "\"NOCYCLE\"",
			},
		},
		{
			name: "ColumnExtraNoKeep",
			pos:  position{line: 162, col: 1, offset: 4429},
			expr: &litMatcher{
				pos:        position{line: 162, col: 22, offset: 4450},
				val:        "NOKEEP",
				ignoreCase: false,
				want:       "\"NOKEEP\"",
			},
		},
		{
			name: "ColumnExtraNoScale",
			pos:  position{line: 163, col: 1, offset: 4460},
			expr: &litMatcher{
				pos:        position{line: 163, col: 23, offset: 4482},
				val:        "NOSCALE",
				ignoreCase: false,
				want:       "\"NOSCALE\"",
			},
		},
		{
			name: "ColumnDefault",
			pos:  position{line: 166, col: 1, offset: 4497},
			expr: &actionExpr{
				pos: position{line: 166, col: 18, offset: 4514},
				run: (*parser).callonColumnDefault1,
				expr: &seqExpr{
					pos: position{line: 166, col: 18, offset: 4514},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 166, col: 18, offset: 4514},
							val:        "DEFAULT",
							ignoreCase: false,
							want:       "\"DEFAULT\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 166, col: 28, offset: 4524},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 28, offset: 4524},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 40, offset: 4536},
							label: "val",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 44, offset: 4540},
								expr: &choiceExpr{
									pos: position{line: 166, col: 45, offset: 4541},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 166, col: 45, offset: 4541},
											name: "LiteralValue",
										},
										&ruleRefExpr{
											pos:  position{line: 166, col: 60, offset: 4556},
											name: "ColumnDefaultKeyword",
										},
										&ruleRefExpr{
											pos:  position{line: 166, col: 83, offset: 4579},
											name: "FunctionCall",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnDefaultKeyword",
			pos:  position{line: 178, col: 1, offset: 4801},
			expr: &choiceExpr{
				pos: position{line: 178, col: 26, offset: 4826},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 178, col: 26, offset: 4826},
						val:        "SYSDATE",
						ignoreCase: false,
						want:       "\"SYSDATE\"",
					},
					&litMatcher{
						pos:        position{line: 178, col: 38, offset: 4838},
						val:        "sysdate",
						ignoreCase: false,
						want:       "\"sysdate\"",
					},
					&litMatcher{
						pos:        position{line: 178, col: 50, offset: 4850},
						val:        "localtimestamp",
						ignoreCase: false,
						want:       "\"localtimestamp\"",
					},
					&litMatcher{
						pos:        position{line: 178, col: 69, offset: 4869},
						val:        "systimestamp",
						ignoreCase: false,
						want:       "\"systimestamp\"",
					},
					&litMatcher{
						pos:        position{line: 178, col: 86, offset: 4886},
						val:        "NULL",
						ignoreCase: false,
						want:       "\"NULL\"",
					},
					&litMatcher{
						pos:        position{line: 178, col: 95, offset: 4895},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 180, col: 1, offset: 4906},
			expr: &seqExpr{
				pos: position{line: 180, col: 17, offset: 4922},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 180, col: 17, offset: 4922},
						name: "Identifier",
					},
					&zeroOrOneExpr{
						pos: position{line: 180, col: 28, offset: 4933},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 28, offset: 4933},
							name: "WhiteSpace",
						},
					},
					&litMatcher{
						pos:        position{line: 180, col: 40, offset: 4945},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 180, col: 44, offset: 4949},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 44, offset: 4949},
							name: "FunctionArgs",
						},
					},
					&litMatcher{
						pos:        position{line: 180, col: 58, offset: 4963},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 181, col: 1, offset: 4968},
			expr: &zeroOrOneExpr{
				pos: position{line: 181, col: 17, offset: 4984},
				expr: &seqExpr{
					pos: position{line: 181, col: 18, offset: 4985},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 181, col: 18, offset: 4985},
							name: "FunctionArg",
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 4997},
							expr: &seqExpr{
								pos: position{line: 181, col: 31, offset: 4998},
								exprs: []any{
									&zeroOrOneExpr{
										pos: position{line: 181, col: 31, offset: 4998},
										expr: &ruleRefExpr{
											pos:  position{line: 181, col: 31, offset: 4998},
											name: "WhiteSpace",
										},
									},
									&litMatcher{
										pos:        position{line: 181, col: 43, offset: 5010},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrOneExpr{
										pos: position{line: 181, col: 47, offset: 5014},
										expr: &ruleRefExpr{
											pos:  position{line: 181, col: 47, offset: 5014},
											name: "WhiteSpace",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 181, col: 59, offset: 5026},
										name: "FunctionArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArg",
			pos:  position{line: 182, col: 1, offset: 5043},
			expr: &choiceExpr{
				pos: position{line: 182, col: 16, offset: 5058},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 182, col: 16, offset: 5058},
						name: "FunctionCall",
					},
					&ruleRefExpr{
						pos:  position{line: 182, col: 31, offset: 5073},
						name: "LiteralValue",
					},
					&ruleRefExpr{
						pos:  position{line: 182, col: 46, offset: 5088},
						name: "Identifier",
					},
					&oneOrMoreExpr{
						pos: position{line: 182, col: 59, offset: 5101},
						expr: &seqExpr{
							pos: position{line: 182, col: 60, offset: 5102},
							exprs: []any{
								&notExpr{
									pos: position{line: 182, col: 60, offset: 5102},
									expr: &charClassMatcher{
										pos:        position{line: 182, col: 61, offset: 5103},
										val:        "[(),]",
										chars:      []rune{'(', ')', ','},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&anyMatcher{
									line: 182, col: 67, offset: 5109,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnType",
			pos:  position{line: 184, col: 1, offset: 5116},
			expr: &actionExpr{
				pos: position{line: 184, col: 15, offset: 5130},
				run: (*parser).callonColumnType1,
				expr: &choiceExpr{
					pos: position{line: 184, col: 16, offset: 5131},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 184, col: 16, offset: 5131},
							val:        "CHAR",
							ignoreCase: false,
							want:       "\"CHAR\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 25, offset: 5140},
							val:        "BLOB",
							ignoreCase: false,
							want:       "\"BLOB\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 34, offset: 5149},
							val:        "CLOB",
							ignoreCase: false,
							want:       "\"CLOB\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 43, offset: 5158},
							val:        "DATE",
							ignoreCase: false,
							want:       "\"DATE\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 52, offset: 5167},
							val:        "DECIMAL",
							ignoreCase: false,
							want:       "\"DECIMAL\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 64, offset: 5179},
							val:        "INT",
							ignoreCase: false,
							want:       "\"INT\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 72, offset: 5187},
							val:        "LONG",
							ignoreCase: false,
							want:       "\"LONG\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 81, offset: 5196},
							val:        "NUMBER",
							ignoreCase: false,
							want:       "\"NUMBER\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 92, offset: 5207},
							val:        "NUMERICAL",
							ignoreCase: false,
							want:       "\"NUMERICAL\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 106, offset: 5221},
							val:        "RAW",
							ignoreCase: false,
							want:       "\"RAW\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 114, offset: 5229},
							val:        "TIMESTAMP",
							ignoreCase: false,
							want:       "\"TIMESTAMP\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 128, offset: 5243},
							val:        "UROWID",
							ignoreCase: false,
							want:       "\"UROWID\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 139, offset: 5254},
							val:        "VARCHAR2",
							ignoreCase: false,
							want:       "\"VARCHAR2\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 152, offset: 5267},
							val:        "VARCHAR",
							ignoreCase: false,
							want:       "\"VARCHAR\"",
						},
						&litMatcher{
							pos:        position{line: 184, col: 164, offset: 5279},
							val:        "\"SYS\".\"XMLTYPE\"",
							ignoreCase: false,
							want:       "\"\\\"SYS\\\".\\\"XMLTYPE\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "ColumnTypeArgs",
			pos:  position{line: 188, col: 1, offset: 5340},
			expr: &actionExpr{
				pos: position{line: 188, col: 19, offset: 5358},
				run: (*parser).callonColumnTypeArgs1,
				expr: &seqExpr{
					pos: position{line: 188, col: 19, offset: 5358},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 188, col: 19, offset: 5358},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 23, offset: 5362},
							label: "args",
							expr: &oneOrMoreExpr{
								pos: position{line: 188, col: 28, offset: 5367},
								expr: &ruleRefExpr{
									pos:  position{line: 188, col: 28, offset: 5367},
									name: "ColumnTypeArg",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 188, col: 43, offset: 5382},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ColumnTypeArg",
			pos:  position{line: 196, col: 1, offset: 5560},
			expr: &actionExpr{
				pos: position{line: 196, col: 18, offset: 5577},
				run: (*parser).callonColumnTypeArg1,
				expr: &seqExpr{
					pos: position{line: 196, col: 18, offset: 5577},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 196, col: 18, offset: 5577},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 18, offset: 5577},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 30, offset: 5589},
							label: "num",
							expr: &choiceExpr{
								pos: position{line: 196, col: 35, offset: 5594},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 196, col: 35, offset: 5594},
										name: "Digits",
									},
									&litMatcher{
										pos:        position{line: 196, col: 42, offset: 5601},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 196, col: 47, offset: 5606},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 47, offset: 5606},
								name: "WhiteSpace",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 59, offset: 5618},
							label: "numType",
							expr: &zeroOrOneExpr{
								pos: position{line: 196, col: 67, offset: 5626},
								expr: &ruleRefExpr{
									pos:  position{line: 196, col: 67, offset: 5626},
									name: "ColumnTypeKeyword",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 196, col: 86, offset: 5645},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 86, offset: 5645},
								name: "WhiteSpace",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 196, col: 98, offset: 5657},
							expr: &litMatcher{
								pos:        position{line: 196, col: 98, offset: 5657},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 196, col: 103, offset: 5662},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 103, offset: 5662},
								name: "WhiteSpace",
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnTypeKeyword",
			pos:  position{line: 211, col: 1, offset: 5916},
			expr: &actionExpr{
				pos: position{line: 211, col: 22, offset: 5937},
				run: (*parser).callonColumnTypeKeyword1,
				expr: &choiceExpr{
					pos: position{line: 211, col: 23, offset: 5938},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 211, col: 23, offset: 5938},
							val:        "BYTE",
							ignoreCase: false,
							want:       "\"BYTE\"",
						},
						&litMatcher{
							pos:        position{line: 211, col: 32, offset: 5947},
							val:        "CHAR",
							ignoreCase: false,
							want:       "\"CHAR\"",
						},
					},
				},
			},
		},
		{
			name: "IgnoreTableEndParams",
			pos:  position{line: 215, col: 1, offset: 5993},
			expr: &zeroOrMoreExpr{
				pos: position{line: 215, col: 25, offset: 6017},
				expr: &seqExpr{
					pos: position{line: 215, col: 26, offset: 6018},
					exprs: []any{
						&notExpr{
							pos: position{line: 215, col: 26, offset: 6018},
							expr: &litMatcher{
								pos:        position{line: 215, col: 27, offset: 6019},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&anyMatcher{
							line: 215, col: 31, offset: 6023,
						},
					},
				},
			},
		},
		{
			name: "ColumnName",
			pos:  position{line: 222, col: 1, offset: 6114},
			expr: &ruleRefExpr{
				pos:  position{line: 222, col: 15, offset: 6128},
				name: "LiteralString",
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 224, col: 1, offset: 6145},
			expr: &seqExpr{
				pos: position{line: 224, col: 15, offset: 6159},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 224, col: 15, offset: 6159},
						val:        "[a-zA-Z_]",
						chars:      []rune{'_'},
						ranges:     []rune{'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&oneOrMoreExpr{
						pos: position{line: 224, col: 24, offset: 6168},
						expr: &charClassMatcher{
							pos:        position{line: 224, col: 24, offset: 6168},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LiteralValue",
			pos:  position{line: 226, col: 1, offset: 6185},
			expr: &choiceExpr{
				pos: position{line: 226, col: 17, offset: 6201},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 226, col: 17, offset: 6201},
						name: "LiteralString",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 33, offset: 6217},
						name: "LiteralNumber",
					},
				},
			},
		},
		{
			name: "LiteralNumber",
			pos:  position{line: 228, col: 1, offset: 6234},
			expr: &actionExpr{
				pos: position{line: 228, col: 18, offset: 6251},
				run: (*parser).callonLiteralNumber1,
				expr: &seqExpr{
					pos: position{line: 228, col: 18, offset: 6251},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 228, col: 18, offset: 6251},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 18, offset: 6251},
								name: "Sign",
							},
						},
						&choiceExpr{
							pos: position{line: 228, col: 25, offset: 6258},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 228, col: 25, offset: 6258},
									name: "Float",
								},
								&ruleRefExpr{
									pos:  position{line: 228, col: 33, offset: 6266},
									name: "Integer",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sign",
			pos:  position{line: 231, col: 1, offset: 6311},
			expr: &charClassMatcher{
				pos:        position{line: 231, col: 9, offset: 6319},
				val:        "[+-]",
				chars:      []rune{'+', '-'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Float",
			pos:  position{line: 232, col: 1, offset: 6325},
			expr: &choiceExpr{
				pos: position{line: 232, col: 10, offset: 6334},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 232, col: 10, offset: 6334},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 232, col: 10, offset: 6334},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 10, offset: 6334},
									name: "Digits",
								},
							},
							&litMatcher{
								pos:        position{line: 232, col: 18, offset: 6342},
								val:        ".",
								ignoreCase: false,
								want:       "\".\"",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 22, offset: 6346},
								name: "Digits",
							},
							&zeroOrOneExpr{
								pos: position{line: 232, col: 29, offset: 6353},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 30, offset: 6354},
									name: "ExponentPart",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 232, col: 47, offset: 6371},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 232, col: 47, offset: 6371},
								name: "Digits",
							},
							&litMatcher{
								pos:        position{line: 232, col: 54, offset: 6378},
								val:        ".",
								ignoreCase: false,
								want:       "\".\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 232, col: 58, offset: 6382},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 59, offset: 6383},
									name: "ExponentPart",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 233, col: 1, offset: 6399},
			expr: &seqExpr{
				pos: position{line: 233, col: 12, offset: 6410},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 233, col: 12, offset: 6410},
						name: "Digits",
					},
					&zeroOrOneExpr{
						pos: position{line: 233, col: 19, offset: 6417},
						expr: &ruleRefExpr{
							pos:  position{line: 233, col: 20, offset: 6418},
							name: "ExponentPart",
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 234, col: 1, offset: 6434},
			expr: &seqExpr{
				pos: position{line: 234, col: 17, offset: 6450},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 234, col: 17, offset: 6450},
						val:        "[eE]",
						chars:      []rune{'e', 'E'},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrOneExpr{
						pos: position{line: 234, col: 22, offset: 6455},
						expr: &charClassMatcher{
							pos:        position{line: 234, col: 22, offset: 6455},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 28, offset: 6461},
						name: "Digits",
					},
				},
			},
		},
		{
			name: "Digits",
			pos:  position{line: 235, col: 1, offset: 6469},
			expr: &actionExpr{
				pos: position{line: 235, col: 11, offset: 6479},
				run: (*parser).callonDigits1,
				expr: &oneOrMoreExpr{
					pos: position{line: 235, col: 11, offset: 6479},
					expr: &charClassMatcher{
						pos:        position{line: 235, col: 11, offset: 6479},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "LiteralString",
			pos:  position{line: 244, col: 1, offset: 6627},
			expr: &choiceExpr{
				pos: position{line: 244, col: 18, offset: 6644},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 244, col: 18, offset: 6644},
						name: "LiteralStringSingleQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 45, offset: 6671},
						name: "LiteralStringDoubleQuote",
					},
				},
			},
		},
		{
			name: "LiteralStringSingleQuote",
			pos:  position{line: 245, col: 1, offset: 6697},
			expr: &actionExpr{
				pos: position{line: 245, col: 29, offset: 6725},
				run: (*parser).callonLiteralStringSingleQuote1,
				expr: &seqExpr{
					pos: position{line: 245, col: 29, offset: 6725},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 29, offset: 6725},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 35, offset: 6731},
							expr: &choiceExpr{
								pos: position{line: 245, col: 36, offset: 6732},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 245, col: 36, offset: 6732},
										val:        "''",
										ignoreCase: false,
										want:       "\"''\"",
									},
									&seqExpr{
										pos: position{line: 245, col: 43, offset: 6739},
										exprs: []any{
											&notExpr{
												pos: position{line: 245, col: 43, offset: 6739},
												expr: &litMatcher{
													pos:        position{line: 245, col: 44, offset: 6740},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
											},
											&anyMatcher{
												line: 245, col: 49, offset: 6745,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 54, offset: 6750},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "LiteralStringDoubleQuote",
			pos:  position{line: 253, col: 1, offset: 6963},
			expr: &actionExpr{
				pos: position{line: 253, col: 29, offset: 6991},
				run: (*parser).callonLiteralStringDoubleQuote1,
				expr: &seqExpr{
					pos: position{line: 253, col: 29, offset: 6991},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 253, col: 29, offset: 6991},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 33, offset: 6995},
							expr: &seqExpr{
								pos: position{line: 253, col: 34, offset: 6996},
								exprs: []any{
									&notExpr{
										pos: position{line: 253, col: 34, offset: 6996},
										expr: &litMatcher{
											pos:        position{line: 253, col: 35, offset: 6997},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
									&anyMatcher{
										line: 253, col: 39, offset: 7001,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 253, col: 43, offset: 7005},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "WhiteSpace",
			pos:  position{line: 258, col: 1, offset: 7084},
			expr: &oneOrMoreExpr{
				pos: position{line: 258, col: 15, offset: 7098},
				expr: &choiceExpr{
					pos: position{line: 258, col: 16, offset: 7099},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 258, col: 16, offset: 7099},
							name: "Spaces",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 25, offset: 7108},
							name: "NewLines",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 36, offset: 7119},
							name: "LineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 50, offset: 7133},
							name: "BlockComment",
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 259, col: 1, offset: 7149},
			expr: &actionExpr{
				pos: position{line: 259, col: 11, offset: 7159},
				run: (*parser).callonSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 259, col: 11, offset: 7159},
					expr: &ruleRefExpr{
						pos:  position{line: 259, col: 11, offset: 7159},
						name: "Space",
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 262, col: 1, offset: 7191},
			expr: &charClassMatcher{
				pos:        position{line: 262, col: 10, offset: 7200},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NewLines",
			pos:  position{line: 263, col: 1, offset: 7207},
			expr: &actionExpr{
				pos: position{line: 263, col: 13, offset: 7219},
				run: (*parser).callonNewLines1,
				expr: &oneOrMoreExpr{
					pos: position{line: 263, col: 13, offset: 7219},
					expr: &ruleRefExpr{
						pos:  position{line: 263, col: 13, offset: 7219},
						name: "NewLine",
					},
				},
			},
		},
		{
			name: "NewLine",
			pos:  position{line: 266, col: 1, offset: 7253},
			expr: &charClassMatcher{
				pos:        position{line: 266, col: 12, offset: 7264},
				val:        "[ \\r\\n]",
				chars:      []rune{' ', '\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 267, col: 1, offset: 7273},
			expr: &actionExpr{
				pos: position{line: 267, col: 16, offset: 7288},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 267, col: 16, offset: 7288},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 267, col: 16, offset: 7288},
							val:        "--",
							ignoreCase: false,
							want:       "\"--\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 21, offset: 7293},
							expr: &seqExpr{
								pos: position{line: 267, col: 22, offset: 7294},
								exprs: []any{
									&notExpr{
										pos: position{line: 267, col: 22, offset: 7294},
										expr: &charClassMatcher{
											pos:        position{line: 267, col: 23, offset: 7295},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 267, col: 30, offset: 7302,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 267, col: 35, offset: 7307},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 267, col: 35, offset: 7307},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 267, col: 35, offset: 7307},
											expr: &litMatcher{
												pos:        position{line: 267, col: 35, offset: 7307},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 267, col: 41, offset: 7313},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 267, col: 48, offset: 7320},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 270, col: 1, offset: 7349},
			expr: &actionExpr{
				pos: position{line: 270, col: 17, offset: 7365},
				run: (*parser).callonBlockComment1,
				expr: &seqExpr{
					pos: position{line: 270, col: 17, offset: 7365},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 270, col: 17, offset: 7365},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 22, offset: 7370},
							expr: &seqExpr{
								pos: position{line: 270, col: 23, offset: 7371},
								exprs: []any{
									&notExpr{
										pos: position{line: 270, col: 23, offset: 7371},
										expr: &litMatcher{
											pos:        position{line: 270, col: 24, offset: 7372},
											val:        "*/",
											ignoreCase: false,
											want:       "\"*/\"",
										},
									},
									&anyMatcher{
										line: 270, col: 29, offset: 7377,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 33, offset: 7381},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 273, col: 1, offset: 7410},
			expr: &actionExpr{
				pos: position{line: 273, col: 12, offset: 7421},
				run: (*parser).callonInclude1,
				expr: &seqExpr{
					pos: position{line: 273, col: 12, offset: 7421},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 273, col: 12, offset: 7421},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 16, offset: 7425},
							expr: &seqExpr{
								pos: position{line: 273, col: 17, offset: 7426},
								exprs: []any{
									&notExpr{
										pos: position{line: 273, col: 17, offset: 7426},
										expr: &charClassMatcher{
											pos:        position{line: 273, col: 18, offset: 7427},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 273, col: 25, offset: 7434,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 273, col: 30, offset: 7439},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 273, col: 30, offset: 7439},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 273, col: 30, offset: 7439},
											expr: &litMatcher{
												pos:        position{line: 273, col: 30, offset: 7439},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 273, col: 36, offset: 7445},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 273, col: 43, offset: 7452},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 277, col: 1, offset: 7483},
			expr: &notExpr{
				pos: position{line: 277, col: 8, offset: 7490},
				expr: &anyMatcher{
					line: 277, col: 9, offset: 7491,
				},
			},
		},
	},
}

func (c *current) onFile1(stmts any) (any, error) {

	var res []any
	//for each pair in stmts
	for _, stmt := range stmts.([]any) {
		pair := stmt.([]any)
		// pair[1] is WhiteSpace and we don't care about it
		if pair[0] != nil {
			res = append(res, pair[0])
		}
	}
	return res, nil
}

func (p *parser) callonFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["stmts"])
}

func (c *current) onCreateTable1(name, body any) (any, error) {

	result := generic.TableDef{
		Name:    name.(string),
		Columns: nil,
	}

	switch b := body.(type) {
	case generic.ColumnsDef:
		result.Columns = b
	case string:
		result.SelectStatement = b
	}

	return result, nil
}

func (p *parser) callonCreateTable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTable1(stack["name"], stack["body"])
}

func (c *current) onGrant1(grantType, grantWhere, grantWho any) (any, error) {

	return generic.Grant{
		Type:  grantType.(string),
		Where: grantWhere.(string),
		Who:   grantWho.(string),
	}, nil
}

func (p *parser) callonGrant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrant1(stack["grantType"], stack["grantWhere"], stack["grantWho"])
}

func (c *current) onGrantPublic1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonGrantPublic1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrantPublic1()
}

func (c *current) onGrantType1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonGrantType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrantType1()
}

func (c *current) onComment1(name, text any) (any, error) {

	result := generic.Comment{
		For:  name.(string),
		Text: text.(string),
	}
	return result, nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["name"], stack["text"])
}

func (c *current) onTableName1(first, rest any) (any, error) {

	// Start with the first name part
	name := first.(string)

	// rest is a slice of []any, each of which looks like []any{"." as []uint8, "part" as string}
	for _, r := range rest.([]any) {
		parts := r.([]any)
		dot := string(parts[0].([]uint8)) // the literal '.'
		next := parts[1].(string)
		name += dot + next
	}

	return name, nil
}

func (p *parser) callonTableName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableName1(stack["first"], stack["rest"])
}

func (c *current) onTableNamePart3() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonTableNamePart3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableNamePart3()
}

func (c *current) onTableBodyDef1(cols any) (any, error) {

	return cols, nil
}

func (p *parser) callonTableBodyDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableBodyDef1(stack["cols"])
}

func (c *current) onColumns1(items any) (any, error) {

	results := generic.ColumnsDef{}

	for _, item := range items.([]any) {
		if item == nil {
			continue
		}

		for _, subitem := range item.([]any) {
			if subitem == nil {
				continue
			}

			switch column := subitem.(type) {
			case *generic.ColumnDef:
				results[column.Name] = column
			}
		}

	}

	return results, nil
}

func (p *parser) callonColumns1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumns1(stack["items"])
}

func (c *current) onColumn1(colname, coltype, _c, defVal any) (any, error) {

	coltypestr := coltype.(string)

	defValStr := ""
	if defVal != nil {
		defValStr = defVal.(string)
	}

	result := &generic.ColumnDef{
		Name:    colname.(string),
		Type:    coltypestr,
		Default: defValStr,
	}

	if _c == nil {
		return result, nil
	}

	items := _c.([]generic.ColumnTypeArg)
	itemslen := len(items)

	if itemslen > 0 {
		switch coltypestr {
		case "NUMBER", "NUMERICAL", "DECIMAL":
			result.Precision = items[0].Number
			if itemslen > 1 {
				result.Scale = items[1].Number
			}
		case "VARCHAR", "VARCHAR2":
			result.VarCharSize = items[0].Number

		}
	}

	return result, nil
}

func (p *parser) callonColumn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumn1(stack["colname"], stack["coltype"], stack["_c"], stack["defVal"])
}

func (c *current) onColumnDefault1(val any) (any, error) {

	switch val.(type) {
	case []uint8:
		return string(val.([]uint8)), nil
	case string:
		return val.(string), nil
	default:
		return nil, nil
	}
	//return val.(string), nil
}

func (p *parser) callonColumnDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnDefault1(stack["val"])
}

func (c *current) onColumnType1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonColumnType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnType1()
}

func (c *current) onColumnTypeArgs1(args any) (any, error) {

	results := []generic.ColumnTypeArg{}
	for _, arg := range args.([]any) {
		results = append(results, arg.(generic.ColumnTypeArg))
	}
	return results, nil
}

func (p *parser) callonColumnTypeArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnTypeArgs1(stack["args"])
}

func (c *current) onColumnTypeArg1(num, numType any) (any, error) {

	result := generic.ColumnTypeArg{
		Number: 0, //num.(int),
	}
	switch num.(type) {
	case int:
		result.Number = num.(int)
	}
	if numType != nil {
		result.Type = numType.(string)
	}
	return result, nil
}

func (p *parser) callonColumnTypeArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnTypeArg1(stack["num"], stack["numType"])
}

func (c *current) onColumnTypeKeyword1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonColumnTypeKeyword1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnTypeKeyword1()
}

func (c *current) onLiteralNumber1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralNumber1()
}

func (c *current) onDigits1() (any, error) {

	str := string(c.text)
	i, err := strconv.Atoi(str)
	if err != nil {
		return math.MaxInt64, nil
	}
	return i, nil //err
}

func (p *parser) callonDigits1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigits1()
}

func (c *current) onLiteralStringSingleQuote1() (any, error) {

	s := string(c.text)
	// Strip the surrounding quotes
	s = s[1 : len(s)-1]
	// Replace doubled single quotes with a single one
	s = strings.ReplaceAll(s, "''", "'")
	return s, nil
}

func (p *parser) callonLiteralStringSingleQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStringSingleQuote1()
}

func (c *current) onLiteralStringDoubleQuote1() (any, error) {

	s := string(c.text)
	return s[1 : len(s)-1], nil //strip quotes
}

func (p *parser) callonLiteralStringDoubleQuote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralStringDoubleQuote1()
}

func (c *current) onSpaces1() (any, error) {

	return nil, nil
}

func (p *parser) callonSpaces1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaces1()
}

func (c *current) onNewLines1() (any, error) {

	return nil, nil
}

func (p *parser) callonNewLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNewLines1()
}

func (c *current) onLineComment1() (any, error) {

	return "", nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1()
}

func (c *current) onBlockComment1() (any, error) {

	return "", nil
}

func (p *parser) callonBlockComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockComment1()
}

func (c *current) onInclude1() (any, error) {

	return "", nil
}

func (p *parser) callonInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
